{"version":3,"sources":["SidebarChat.js","StateProvider.js","Sidebar.js","axios.js","Chat.js","firebase.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","className","Avatar","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","user","src","photoURL","IconButton","SearchOutlined","placeholder","type","instance","axios","create","baseURL","Chat","messages","useState","input","setInput","console","log","sendMessage","e","a","preventDefault","post","message","name","displayName","timestamp","Intl","DateTimeFormat","hour","minute","format","Date","now","recieved","AttachFile","map","InsertEmoticon","onChange","target","onClick","auth","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","provider","GoogleAuthProvider","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","res","catch","error","alert","App","setMessages","useEffect","get","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa971148.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SidebarChat.css\";\nimport { Avatar } from \"@material-ui/core\";\n\nfunction SidebarChat() {\n  return (\n    <div className=\"sidebarChat\">\n      <Avatar />\n      <div className=\"sidebarChat__info\">\n        <h2>Room Name</h2>\n        <p>last message sent</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { IconButton, Avatar } from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Sidebar() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={user.photoURL} />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlined />\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n      <div className=\"sidebar__chats\">\n        <SidebarChat />\n        <SidebarChat />\n        <SidebarChat />\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://whatspp-clone-backend.herokuapp.com/\",\n});\n\nexport default instance;\n","import React, { useState } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport {\n  SearchOutlined,\n  AttachFile,\n  MoreVert,\n  Message,\n  InsertEmoticon,\n  SettingsInputAntenna,\n} from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport axios from \"./axios\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Chat({ messages }) {\n  const [input, setInput] = useState(\"\");\n  const [{ user }, dispatch] = useStateValue();\n  console.log(user);\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    await axios.post(\"/messages/new\", {\n      message: input,\n      name: user.displayName,\n      timestamp: new Intl.DateTimeFormat(\"en-US\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      }).format(Date.now()),\n      recieved: false,\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        <Avatar src={user.photoURL} />\n\n        <div className=\"chat__headerInfo\">\n          <h3>Room name</h3>\n          <p>last seen at...</p>\n        </div>\n        <div className=\"chat__headerRight\">\n          <IconButton>\n            <SearchOutlined />\n          </IconButton>\n          <IconButton>\n            <AttachFile />\n          </IconButton>\n\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat__body\">\n        {messages.map((message) => (\n          <p\n            className={`chat__message ${\n              message.name === user.displayName && \"chat__reciever\"\n            }`}\n          >\n            <span className=\"chat__name\">{message.name}</span>\n            {message.message}\n            <span className=\"chat__timestamp\">{message.timestamp}</span>\n          </p>\n        ))}\n      </div>\n\n      <div className=\"chat__footer\">\n        <InsertEmoticon />\n        <form>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"type a message\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage} type=\"submit\">\n            send a Message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDBaXZ89OdgMO8HMkoEyBqK1YlIWzGh45c\",\n  authDomain: \"whatsapp-clone-47661.firebaseapp.com\",\n  databaseURL: \"https://whatsapp-clone-47661.firebaseio.com\",\n  projectId: \"whatsapp-clone-47661\",\n  storageBucket: \"whatsapp-clone-47661.appspot.com\",\n  messagingSenderId: \"222392720285\",\n  appId: \"1:222392720285:web:dd01178e169bfef9542d74\",\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\n","export const initialState = {\n  user: null,\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { useState } from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport { actionTypes } from \"./reducer\";\nimport { useStateValue } from \"./StateProvider\";\nimport { RestoreOutlined } from \"@material-ui/icons\";\n\nfunction Login() {\n  const [state, dispatch] = useStateValue();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((res) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: res.user,\n        });\n\n        console.log(res);\n      })\n      .catch((error) => alert(error.message));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login__logo\">\n        <img\n          src=\"https://1.bp.blogspot.com/-9QI816UQv4U/VdnyUjC-AKI/AAAAAAAAFAk/oZ_9Fp8uFbs/s1600/whatsup-logo1.png\"\n          alt=\"\"\n        />\n      </div>\n      <Button type=\"submit\" onClick={signIn}>\n        Sign In\n      </Button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\nimport { useStateValue } from \"./StateProvider\";\nimport Login from \"./Login\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    axios.get(\"/messages/sync\").then((res) => {\n      setMessages(res.data);\n    });\n  }, []);\n\n  console.log(messages);\n\n  useEffect(() => {\n    const pusher = new Pusher(\"d178400321556bd83beb\", {\n      cluster: \"mt1\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", (newMessage) => {\n      setMessages([...messages, newMessage]);\n    });\n\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <>\n          <div className=\"app__body\">\n            <Sidebar />\n            <Chat messages={messages} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}